// Generated by CoffeeScript 1.6.3
/*!
 * jquery.videoAnimatePlay
 *
 * http://lab.hisasann.com/videoAnimatePlay/
 * Copyright 2014 hisasann
 * Released under the MIT license
*/


(function() {
  (function(global) {
    'use strict';
    return (function() {
      var lastTime, vendors, x;
      lastTime = 0;
      vendors = ["ms", "moz", "webkit", "o"];
      x = 0;
      while (x < vendors.length && !global.requestAnimationFrame) {
        global.requestAnimationFrame = global[vendors[x] + "RequestAnimationFrame"];
        global.cancelRequestAnimationFrame = global[vendors[x] + "CancelRequestAnimationFrame"];
        ++x;
      }
      if (!global.requestAnimationFrame) {
        global.requestAnimationFrame = function(callback) {
          var currTime, id, timeToCall;
          currTime = new Date().getTime();
          timeToCall = Math.max(0, 16 - (currTime - lastTime));
          id = global.setTimeout(function() {
            callback(currTime + timeToCall);
          }, timeToCall);
          lastTime = currTime + timeToCall;
          return id;
        };
      }
      if (!global.cancelAnimationFrame) {
        global.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      }
    })();
  })(this);

  $.videoAnimatePlay = function(options) {
    var animate;
    animate = function(opts) {
      var frameLoop, start;
      start = new Date;
      (frameLoop = function() {
        var delta, progress, timePassed;
        timePassed = new Date - start;
        progress = timePassed / opts.duration;
        if (progress > 1) {
          progress = 1;
        }
        delta = opts.delta(progress);
        opts.step(delta);
        if (progress === 1) {
          opts.callback();
          return;
        }
        return requestAnimationFrame(frameLoop);
      })();
    };
    animate({
      duration: options.duration || 1000,
      delta: options.easing,
      step: function(delta) {
        options.element.currentTime = (options.to - options.from) * delta + options.from;
      },
      callback: options.callback
    });
  };

}).call(this);
